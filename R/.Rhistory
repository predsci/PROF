library(devtools)
load_all(".")
ls()
getwd()
hello()
library(roxygen2)
roxygenise()
setwd(../)
roxygenise()
export(hello)
roxygenise()
setwd(R)
getwd()
roxygenise()
setwd(../)
roxygenise()
getwd()
setwd(../)
setwd('../')
getwd()
roxygenise()
help(hello)
roxygenise()
load_all(".")
quit()
source('util.R')
library(pomp)
source('util.R')
library(EpiEstim)
getwd()
source('../dev/ex_hhs_data.R')
npath = length(prof_data)
ip=2
mydata = prof_data[[ip]]
# location name
reg_name = mydata$loc_name
# location population
pop = mydata$population
# pathogen name (covid or flu)
pathogen = mydata$disease
# hospitalization incidence
inc = mydata$data$inc
# dates
dates  = mydata$data$date
ndates = length(dates)
# using the date array build an integer day array
times = dates_to_int(dates)
ntimes = length(times)
# set the model to 'sirh' or 'seirh' based on pathogen
model = get_model(pathogen)
I0_est = est_I0(inc, pathogen)
states0 <- set_init_states(pop, I0_est, model)
param0 <- init_param(model, inc)
end_of_season = TRUE
baseline <- get_baseline(inc, end_of_season)
ntimes = length(inc)
time = 1:ntimes
data = data.frame(time = time, cases = inc)
pomp(data=data[,c('time', 'cases')],
times="time",t0=0,
rprocess=euler(step.fun = Csnippet(sirh.step),delta.t=1/20.),
accumvars = c("Ic", "Ih"),
rinit=init,
rmeasure=rmeas,
dmeasure=dmeas,
obsnames="cases",
statenames=c("S","I","R","H1","H2","Ic","Ih"),
paramnames=names(param0)) -> flu
source('../../../michal/code/td-flu/util.R')
pomp(data=data[,c('time', 'cases')],
times="time",t0=0,
rprocess=euler(step.fun = Csnippet(sirh.step),delta.t=1/20.),
accumvars = c("Ic", "Ih"),
rinit=init,
rmeasure=rmeas,
dmeasure=dmeas,
obsnames="cases",
statenames=c("S","I","R","H1","H2","Ic","Ih"),
paramnames=names(param0)) -> flu
names(param0)
quit()
getwd()
library(devtools)
load_all("~/Dropbox/CSMB03/code/PROF/")
getwd()
source('../dev/ex_hhs_data.R')
npath = length(prof_data)
mydata = prof_data[[ip]]
ip=2
mydata = prof_data[[ip]]
# location name
reg_name = mydata$loc_name
# location population
pop = mydata$population
# pathogen name (covid or flu)
pathogen = mydata$disease
# hospitalization incidence
inc = mydata$data$inc
# dates
dates  = mydata$data$date
ndates = length(dates)
# using the date array build an integer day array
times = dates_to_int(dates)
ntimes = length(times)
# set the model to 'sirh' or 'seirh' based on pathogen
model = get_model(pathogen)
# estimate the initial number of infections
I0_est = est_I0(inc, pathogen)
# based on model/pathogen set initial conditions for the states/compartments
states0 <- set_init_states(pop, I0_est, model)
# set some other pathogen specific model parameters
param0 <- init_param(model, inc)
# estimate for baseline - will need to set key word based on number of weeks
# of data
end_of_season = TRUE
baseline <- get_baseline(inc, end_of_season)
# need to add elements to the list of parameters as needed by run_optim
param0 <- append(param0, c('baseline' = baseline, 'pop' = pop,
'S_0' = states0$S_0, 'I_0' = states0$I_0, 'R_0' = states0$R_0))
param0
ntimes = length(inc)
time = 1:ntimes
data = data.frame(time = time, cases = inc)
pomp(data=data[,c('time', 'cases')],
times="time",t0=0,
rprocess=euler(step.fun = Csnippet(sirh.step),delta.t=1/20.),
accumvars = c("Ic", "Ih"),
rinit=init,
rmeasure=rmeas,
dmeasure=dmeas,
obsnames="cases",
statenames=c("S","I","R","H1","H2","Ic","Ih"),
paramnames=names(param0)) -> flu
names(param0)
pomp(data=data[,c('time', 'cases')],
times="time",t0=0,
rprocess=euler(step.fun = Csnippet(sirh.step),delta.t=1/20.),
accumvars = c("Ic", "Ih"),
rinit=init,
rmeasure=rmeas,
dmeasure=dmeas,
obsnames="cases",
statenames=c("S","I","R","H1","H2","Ic","Ih"),
paramnames=names(param0)) -> flu
coef(flu) <- c(Beta = param0$Beta, gamma = param0$gamma,
mu_H1H2 = param0$mu_H1H2, pH = param0$pH, pop = param0$pop, I_0 = param0$I_0,
S_0 = param0$S_0, R_0 = param0$R_0,
rho = param0$rho, baseline = param0$baseline)
pomp(data=data,
times="time",t0=0,
skeleton = vectorfield(sirh.ode),
accumvars = c("Ic", "Ih"),
rinit=init,
obsnames="cases",
statenames=c("S","I","R","H1","H2","Ic","Ih"),
paramnames=names(param0)) -> flu2
f1 <- function (par) {
params <- c(Beta = exp(param0$Beta), gamma =  param0$gamma,
mu_H1H2 = param0$mu_H1H2, pH = param0$pH, pop = param0$pop, I_0 = param0$I_0,
S_0 = param0$S_0, R_0 = param0$R_0,
rho = param0$rho, baseline = param0$baseline)
-poisson.loglik(params)
}
poisson.loglik <- function (params) {
x <- trajectory(flu2,params=params, format= 'data.frame')
lambda = unlist(params$rho*x[,'Ih']+ params$baseline)
sum(dpois(x=data[,'cases'],lambda=lambda,log=TRUE), na.rm = TRUE)
}
fit1 <- optim(f1,par=c(log(param0$Beta),log(param0$mu_H1H2),logit(param0$pH)),
control=list(maxit=500), method = "SANN")
parnames
names(par0)
names(param0)
param0
param0[c('gamma', 'Beta')]
quit()
